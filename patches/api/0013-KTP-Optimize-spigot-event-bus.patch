From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <lynxplay101@gmail.com>
Date: Thu, 9 Dec 2021 01:53:30 +0100
Subject: [PATCH] KTP: Optimize spigot event bus

This patch contains a lot of small optimizations to the spigot event bus
to improve its speed as much as possible, allowing for a large amount of
events to be published by the server without impacting the overall
performance too much.

diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 740bbce54140480039a637c9fee6ccb3f4da1027..cf864109977fee9b24bb09df40526cc0b537f1dd 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class Event {
     private String name;
-    private final boolean async;
+    private final net.kyori.adventure.util.TriState async; // KTP - optimize spigot event bus
 
     /**
      * The default constructor is defined for cleaner code. This constructor
@@ -32,9 +32,35 @@ public abstract class Event {
      *     by default from default constructor
      */
     public Event(boolean isAsync) {
-        this.async = isAsync;
+        // KTP start - optimize spigot event bus
+        this(net.kyori.adventure.util.TriState.byBoolean(isAsync));
     }
 
+    /**
+     * This constructor is used to explicitly declare an event as synchronous
+     * or asynchronous or potentially unset.
+     *
+     * @param isAsync true indicates the event will fire asynchronously, false
+     *                by default from default constructor, unset indicates that the event may be called on either the server thread or off the server
+     *                thread.
+     */
+    public Event(@NotNull final net.kyori.adventure.util.TriState isAsync) {
+       this.async = isAsync;
+    }
+
+    /**
+     * Returns a tristate that, when resolving to true or false, has the exact indications defined by {@link #isAsynchronous()}.
+     * <p>
+     * If the tristate resolves to NOT_SET, the event may or may not have been fired off the main thread, meaning a plugin would have
+     * to validate what thread the spigot event bus was called on.
+     *
+     * @return the tristate enum.
+     */
+    public final @NotNull net.kyori.adventure.util.TriState asynchronous() {
+        return this.async;
+    }
+    // KTP end - optimize spigot event bus
+
     // Paper start
     /**
      * Calls the event and tests if cancelled.
@@ -92,7 +118,7 @@ public abstract class Event {
      * @return false by default, true if the event fires asynchronously
      */
     public final boolean isAsynchronous() {
-        return async;
+        return this.async == net.kyori.adventure.util.TriState.TRUE; // KTP - optimize spigot event bus
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 419aec56b0e3fa8bcec2ea7f340caa3456b57d00..8530d926931a54ed1300c40cd1e0908b2d9b594d 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -62,8 +62,10 @@ public class RegisteredListener {
      * @throws EventException If an event handler throws an exception.
      */
     public void callEvent(@NotNull final Event event) throws EventException {
-        if (event instanceof Cancellable) {
-            if (((Cancellable) event).isCancelled() && isIgnoringCancelled()) {
+        // KTP start - optimize spigot event bus
+        if (isIgnoringCancelled()) {
+            if (event instanceof Cancellable cancellable && cancellable.isCancelled()) {
+        // KTP end - optimize spigot event bus
                 return;
             }
         }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index e96c0c163143a5cd699964331f63a42f97641727..5463b8beafeb40d1f9db900f7467aabd77418cd6 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -614,11 +614,15 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     public void callEvent(@NotNull Event event) {
         // Paper - replace callEvent by merging to below method
-        if (event.isAsynchronous() && server.isPrimaryThread()) {
+        // KTP start - optimize spigot event bus
+        final boolean isAsync = event.isAsynchronous();
+        final boolean isPrimary = server.isPrimaryThread(); // Cache to prevent multiple thread object comparisons.
+        if (isAsync && isPrimary) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !server.isPrimaryThread() && !server.isStopping() ) {
+        } else if (!isAsync && !isPrimary && !server.isStopping() ) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
+        // KTP end - optimize spigot event bus
 
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
