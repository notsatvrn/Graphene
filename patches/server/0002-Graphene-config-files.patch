From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Thu, 16 Sep 2021 20:50:28 -0400
Subject: [PATCH] Graphene config files


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d5c61053f6af91aa5d0894750ab86372a91c9a73..e8af393114fecd514f0671adf0154df561c01874 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -239,6 +239,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         net.pl3x.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Graphene start
+        try {
+            io.graphenemc.graphene.GrapheneConfig.init((java.io.File) options.valueOf("graphene-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        io.graphenemc.graphene.GrapheneConfig.registerCommands();
+        // Graphene end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 7a0462425f62ce1fb197fa2670e102286ef4c865..3432c7c24d5279a1f59dea9771ee4b252fc13ad1 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -170,6 +170,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
 
+    public final io.graphenemc.graphene.GrapheneWorldConfig grapheneConfig; // Graphene
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -371,6 +373,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.grapheneConfig = new io.graphenemc.graphene.GrapheneWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Graphene
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/io.graphenemc.graphene/GrapheneConfig.java b/src/main/java/net/pl3x/graphene/GrapheneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..08de032c186b4481b141be2425bfc1f2aef1e0b6
--- /dev/null
+++ b/src/main/java/io.graphenemc.graphene/GrapheneConfig.java
@@ -0,0 +1,148 @@
+package io.graphenemc.graphene;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import io.graphenemc.graphene.command.GrapheneCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class GrapheneConfig {
+    private static final String HEADER = "This is the main configuration file for Graphene.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.\n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load graphene.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("graphene", new GrapheneCommand("graphene"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(GrapheneConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Graphene", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io.graphenemc.graphene/GrapheneWorldConfig.java b/src/main/java/net/pl3x/graphene/GrapheneWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..a826e2cc5167a7ae9ec88d33efb890ad95917bf9
--- /dev/null
+++ b/src/main/java/io.graphenemc.graphene/GrapheneWorldConfig.java
@@ -0,0 +1,79 @@
+package io.graphenemc.graphene;
+
+import net.minecraft.server.level.ServerLevel;
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.function.Predicate;
+import static io.graphenemc.graphene.GrapheneConfig.log;
+
+@SuppressWarnings("unused")
+public class GrapheneWorldConfig {
+
+    private final ServerLevel level;
+    private final String worldName;
+
+    public GrapheneWorldConfig(ServerLevel level, String worldName) {
+        this.level = level;
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        GrapheneConfig.readConfig(GrapheneWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, val);
+        GrapheneConfig.config.set("world-settings.default." + path, val);
+        if (GrapheneConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            GrapheneConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            GrapheneConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = GrapheneConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : GrapheneConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private String getString(String path, String def) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, def);
+        return GrapheneConfig.config.getString("world-settings." + worldName + "." + path, GrapheneConfig.config.getString("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, def);
+        return GrapheneConfig.config.getBoolean("world-settings." + worldName + "." + path, GrapheneConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, def);
+        return GrapheneConfig.config.getDouble("world-settings." + worldName + "." + path, GrapheneConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, def);
+        return GrapheneConfig.config.getInt("world-settings." + worldName + "." + path, GrapheneConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        GrapheneConfig.config.addDefault("world-settings.default." + path, def);
+        return GrapheneConfig.config.getList("world-settings." + worldName + "." + path, GrapheneConfig.config.getList("world-settings.default." + path));
+    }
+
+    private Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = GrapheneConfig.getMap("world-settings.default." + path, def);
+        final Map<String, Object> value = GrapheneConfig.getMap("world-settings." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
diff --git a/src/main/java/io.graphenemc.graphene/command/GrapheneCommand.java b/src/main/java/net/pl3x/graphene/command/GrapheneCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..c539c841dc990bac13d0f2eff006f4e1bdfd6c34
--- /dev/null
+++ b/src/main/java/io.graphenemc.graphene/command/GrapheneCommand.java
@@ -0,0 +1,66 @@
+package io.graphenemc.graphene.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import io.graphenemc.graphene.GrapheneConfig;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class GrapheneCommand extends Command {
+    public GrapheneCommand(String name) {
+        super(name);
+        this.description = "Graphene related commands";
+        this.usageMessage = "/graphene [reload | version]";
+        this.setPermission("bukkit.command.graphene");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            GrapheneConfig.init((File) console.options.valueOf("graphene-settings"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.grapheneConfig.init();
+                level.resetBreedingCooldowns();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Graphene config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3e41120606f4eb2348ea29a78ded716bdbffbaca..da3725de515dbc7bc25b34611b9f0c119af8f2d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -925,6 +925,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        io.graphenemc.graphene.GrapheneConfig.init((File) console.options.valueOf("graphene-settings")); // Graphene
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -966,6 +967,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.purpurConfig.init(); // Purpur
+            world.grapheneConfig.init(); // Graphene
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2600,6 +2602,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Graphene start
+        @Override
+        public YamlConfiguration getGrapheneConfig() {
+            return io.graphenemc.graphene.GrapheneConfig.config;
+        }
+        // Graphene end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 56674053351962a75b2731dde137dbbc0c70dbde..bbdb893ae71ee6031cbdf72cecfecd901b8cd639 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -155,6 +155,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Graphene Start
+                acceptsAll(asList("graphene", "graphene-settings"), "File for graphene settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("graphene.yml"))
+                        .describedAs("Yml file");
+                // Graphene end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
