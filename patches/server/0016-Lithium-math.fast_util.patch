From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: notsatvrn <satvrn@gmx.com>
Date: Fri, 24 Jan 2025 23:39:37 -0800
Subject: [PATCH] Lithium: math.fast_util

Original code by JellySquid, licensed under GNU Lesser General Public License v3.0
you can find the original code on https://github.com/CaffeineMC/lithium-fabric/ (Yarn mappings)

diff --git a/src/main/java/net/minecraft/core/AxisCycle.java b/src/main/java/net/minecraft/core/AxisCycle.java
index b5d8a60dc78a76c0a55bfc30cc49d26857bd914a..1550b44dac36b4136c29afea1956c041dab780a6 100644
--- a/src/main/java/net/minecraft/core/AxisCycle.java
+++ b/src/main/java/net/minecraft/core/AxisCycle.java
@@ -2,14 +2,42 @@ package net.minecraft.core;
 
 public enum AxisCycle {
     NONE {
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public int cycle(int x, int y, int z, Direction.Axis axis) {
-            return axis.choose(x, y, z);
+            //return axis.choose(x, y, z);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return x;
+                case 1: //Y
+                    return y;
+                case 2: //Z
+                    return z;
+            }
+
+            throw new IllegalArgumentException();
         }
 
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public double cycle(double x, double y, double z, Direction.Axis axis) {
-            return axis.choose(x, y, z);
+            //return axis.choose(x, y, z);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return x;
+                case 1: //Y
+                    return y;
+                case 2: //Z
+                    return z;
+            }
+
+            throw new IllegalArgumentException();
         }
 
         @Override
@@ -23,19 +51,61 @@ public enum AxisCycle {
         }
     },
     FORWARD {
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public int cycle(int x, int y, int z, Direction.Axis axis) {
-            return axis.choose(z, x, y);
+            //return axis.choose(z, x, y);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return z;
+                case 1: //Y
+                    return x;
+                case 2: //Z
+                    return y;
+            }
+
+            throw new IllegalArgumentException();
         }
 
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public double cycle(double x, double y, double z, Direction.Axis axis) {
-            return axis.choose(z, x, y);
+            //return axis.choose(z, x, y);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return z;
+                case 1: //Y
+                    return x;
+                case 2: //Z
+                    return y;
+            }
+
+            throw new IllegalArgumentException();
         }
 
+        /**
+         * @reason Avoid expensive array/modulo operations
+         * @author JellySquid
+         */
         @Override
         public Direction.Axis cycle(Direction.Axis axis) {
-            return AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)];
+            //return AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)];
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return Direction.Axis.Z;
+                case 1: //Y
+                    return Direction.Axis.X;
+                case 2: //Z
+                    return Direction.Axis.Y;
+            }
+
+            throw new IllegalArgumentException();
         }
 
         @Override
@@ -44,19 +114,61 @@ public enum AxisCycle {
         }
     },
     BACKWARD {
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public int cycle(int x, int y, int z, Direction.Axis axis) {
-            return axis.choose(y, z, x);
+            //return axis.choose(y, z, x);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return y;
+                case 1: //Y
+                    return z;
+                case 2: //Z
+                    return x;
+            }
+
+            throw new IllegalArgumentException();
         }
 
+        /**
+          * @reason Simplify the code to better help the JVM optimize it
+          * @author JellySquid
+          */
         @Override
         public double cycle(double x, double y, double z, Direction.Axis axis) {
-            return axis.choose(y, z, x);
+            //return axis.choose(y, z, x);
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return y;
+                case 1: //Y
+                    return z;
+                case 2: //Z
+                    return x;
+            }
+
+            throw new IllegalArgumentException();
         }
 
+        /**
+         * @reason Avoid expensive array/modulo operations
+         * @author JellySquid
+         */
         @Override
         public Direction.Axis cycle(Direction.Axis axis) {
-            return AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)];
+            //return AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)];
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return Direction.Axis.Y;
+                case 1: //Y
+                    return Direction.Axis.Z;
+                case 2: //Z
+                    return Direction.Axis.X;
+            }
+
+            throw new IllegalArgumentException();
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 2b84c0ee17a96bca10e305f5991077d18d59cddc..0e9c88bd83780b9ff9edf3b1bf5dbbcdcd5b4b2e 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -171,8 +171,12 @@ public enum Direction implements StringRepresentable {
         }
     }
 
+    /**
+     * @reason Avoid the modulo/abs operations
+     * @author JellySquid
+     */
     public Direction getOpposite() {
-        return from3DDataValue(this.oppositeIndex);
+        return VALUES[this.oppositeIndex];
     }
 
     public Direction getClockWise(Direction.Axis axis) {
@@ -398,8 +402,12 @@ public enum Direction implements StringRepresentable {
         return (float)((this.data2d & 3) * 90);
     }
 
+    /**
+     * @reason Do not allocate an excessive number of Direction arrays
+     * @author JellySquid
+     */
     public static Direction getRandom(Random random) {
-        return Util.getRandom(VALUES, random);
+        return VALUES[random.nextInt(VALUES.length)];
     }
 
     public static Direction getNearest(double x, double y, double z) {
@@ -487,6 +495,13 @@ public enum Direction implements StringRepresentable {
             }
         };
 
+        static {
+            assert Direction.Axis.X.ordinal() == 0;
+            assert Direction.Axis.Y.ordinal() == 1;
+            assert Direction.Axis.Z.ordinal() == 2;
+            assert Direction.Axis.values().length == 3;
+        }
+
         public static final Direction.Axis[] VALUES = values();
         public static final Codec<Direction.Axis> CODEC = StringRepresentable.fromEnum(Direction.Axis::values, Direction.Axis::byName);
         private static final Map<String, Direction.Axis> BY_NAME = Arrays.stream(VALUES).collect(Collectors.toMap(Direction.Axis::getName, (axis) -> {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index cfb2e46b34b2982d6724f18214557fc80cf4adfa..a61d8ee306ae12f2cdbd619949b4df311bfcd9a6 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -80,12 +80,40 @@ public class AABB {
         return new AABB(this.minX, this.minY, this.minZ, this.maxX, this.maxY, maxZ);
     }
 
+    /**
+     * @reason Simplify the code to better help the JVM optimize it
+     * @author JellySquid
+     */
     public double min(Direction.Axis axis) {
-        return axis.choose(this.minX, this.minY, this.minZ);
+        //return axis.choose(this.minX, this.minY, this.minZ);
+        switch (axis.ordinal()) {
+            case 0: //X
+                return this.minX;
+            case 1: //Y
+                return this.minY;
+            case 2: //Z
+                return this.minZ;
+        }
+
+        throw new IllegalArgumentException();
     }
 
+    /**
+     * @reason Simplify the code to better help the JVM optimize it
+     * @author JellySquid
+     */
     public double max(Direction.Axis axis) {
-        return axis.choose(this.maxX, this.maxY, this.maxZ);
+        //return axis.choose(this.maxX, this.maxY, this.maxZ);
+        switch (axis.ordinal()) {
+            case 0: //X
+                return this.maxX;
+            case 1: //Y
+                return this.maxY;
+            case 2: //Z
+                return this.maxZ;
+        }
+
+        throw new IllegalArgumentException();
     }
 
     @Override
