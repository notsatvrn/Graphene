From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: peaches94 <peachescu94@gmail.com>
Date: Sun, 10 Jul 2022 13:29:20 -0500
Subject: [PATCH] Sakura: feat: reduce work done by game event system

1. going into game event dispatching can be expensive so run the checks before dispatching

2. euclideangameeventdispatcher is not used concurrently so we ban that usage for improved performance with allays

Original license: GPLv3
Original project: https://github.com/Bloom-host/Petal

diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index db7904b1bb402a36684b97c443336630762aeaf9..6608f0275d824a06c0876b8ea869282febf4c1de 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -123,7 +123,18 @@ public class LevelChunk implements ChunkAccess {
     private Consumer<LevelChunk> postLoad;
     private final ChunkPos chunkPos; public final long coordinateKey; public final int locX; public final int locZ; // Paper - cache coordinate key
     private volatile boolean isLightCorrect;
-    private final Int2ObjectMap<GameEventDispatcher> gameEventDispatcherSections;
+    // petal start
+    private final GameEventDispatcher[] gameEventDispatcherSections;
+    private static final int GAME_EVENT_DISPATCHER_RADIUS = 2;
+
+    private static int getGameEventSectionIndex(int sectionIndex) {
+        return sectionIndex + GAME_EVENT_DISPATCHER_RADIUS;
+    }
+
+    private static int getGameEventSectionLength(int sectionCount) {
+        return sectionCount + (GAME_EVENT_DISPATCHER_RADIUS * 2);
+    }
+    // petal end

     // Paper start - rewrite light engine
     protected volatile SWMRNibbleArray[] blockNibbles;
@@ -205,7 +216,7 @@ public class LevelChunk implements ChunkAccess {
         this.locX = pos.x; this.locZ = pos.z; // Paper - reduce need for field look ups
         this.chunkPos = pos; this.coordinateKey = ChunkPos.asLong(locX, locZ); // Paper - cache long key
         this.upgradeData = upgradeData;
-        this.gameEventDispatcherSections = new Int2ObjectOpenHashMap();
+        this.gameEventDispatcherSections = new GameEventDispatcher[getGameEventSectionLength(this.getSectionsCount())]; // petal
         Heightmap.Types[] aheightmap_type = Heightmap.Types.values();
         int j = aheightmap_type.length;

@@ -519,9 +530,23 @@ public class LevelChunk implements ChunkAccess {

     @Override
     public GameEventDispatcher getEventDispatcher(int ySectionCoord) {
-        return (GameEventDispatcher) this.gameEventDispatcherSections.computeIfAbsent(ySectionCoord, (j) -> {
-            return new EuclideanGameEventDispatcher(this.level);
-        });
+        // petal start
+        int sectionIndex = getGameEventSectionIndex(this.getSectionIndexFromSectionY(ySectionCoord));
+
+        // drop game events that are too far away (32 blocks) from loaded sections
+        // this matches the highest radius of game events in the game
+        if (sectionIndex < 0 || sectionIndex >= this.gameEventDispatcherSections.length) {
+            return GameEventDispatcher.NOOP;
+        }
+
+        var dispatcher = this.gameEventDispatcherSections[sectionIndex];
+
+        if (dispatcher == null) {
+            dispatcher = this.gameEventDispatcherSections[sectionIndex] = new EuclideanGameEventDispatcher(this.level);
+        }
+
+        return dispatcher;
+        // petal end
     }

     @Override
@@ -931,7 +956,7 @@ public class LevelChunk implements ChunkAccess {

                     gameeventdispatcher.unregister(gameeventlistener);
                     if (gameeventdispatcher.isEmpty()) {
-                        this.gameEventDispatcherSections.remove(i);
+                        this.gameEventDispatcherSections[getGameEventSectionIndex(this.getSectionIndexFromSectionY(i))] = null; // petal
                     }
                 }
             }
