From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: satvrn <pastawho@gmail.com>
Date: Fri, 10 Dec 2021 21:59:00 +0000
Subject: [PATCH] Graphene optimizations

These optimizations are potentially unstable!

Based on P4per's "Performance Improvements" patch.

diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index 34bc24403a83ae578d2fc3956b4883894c618747..4323a6f0c03f6e95911ddf8b135d7263cd0a8e62 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -66,6 +66,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.function.ToIntFunction;
 import java.util.stream.Collectors;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class PaperCommand extends Command {
     private static final String BASE_PERM = "bukkit.command.paper.";
@@ -213,7 +214,7 @@ public class PaperCommand extends Command {
             case "version":
                 Command ver = MinecraftServer.getServer().server.getCommandMap().getCommand("version");
                 if (ver != null) {
-                    ver.execute(sender, commandLabel, new String[0]);
+                    ver.execute(sender, commandLabel, ArrayConstants.STREMPTY); // Graphene
                     break;
                 }
                 // else - fall through to default
diff --git a/src/main/java/io/graphenemc/graphene/command/GrapheneCommand.java b/src/main/java/io/graphenemc/graphene/command/GrapheneCommand.java
index b20f2625170d9aa3c8976df241ea5ab9f4eae308..397666b21c5a89f21be5978ddae486e680edca92 100644
--- a/src/main/java/io/graphenemc/graphene/command/GrapheneCommand.java
+++ b/src/main/java/io/graphenemc/graphene/command/GrapheneCommand.java
@@ -13,6 +13,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants;
 
 public class GrapheneCommand extends Command {
     public GrapheneCommand(String name) {
@@ -57,7 +58,7 @@ public class GrapheneCommand extends Command {
         } else if (args[0].equalsIgnoreCase("version")) {
             Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
             if (verCmd != null) {
-                return verCmd.execute(sender, commandLabel, new String[0]);
+                return verCmd.execute(sender, commandLabel, ArrayConstants.STREMPTY);
             }
         }
 
diff --git a/src/main/java/me/jellysquid/mods/lithium/common/util/ArrayConstants.java b/src/main/java/me/jellysquid/mods/lithium/common/util/ArrayConstants.java
index 1ed3c1fc57ad3e254d5c82ea4c90c3f0732165e2..abcc3ec359f4f8917baf5ccc1f0dfc84eccd4c20 100644
--- a/src/main/java/me/jellysquid/mods/lithium/common/util/ArrayConstants.java
+++ b/src/main/java/me/jellysquid/mods/lithium/common/util/ArrayConstants.java
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.lithium.common.util;
 
 public class ArrayConstants {
-    public static final int[] EMPTY = new int[0];
-    public static final int[] ZERO = new int[]{0};
+    public static final int[] INTEMPTY = new int[0];
+    public static final int[] INTZERO = new int[]{0};
+    public static final String[] STREMPTY = new String[0];
 }
diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 7199be3b9c00c66f452e92ad35795017112f1658..ee8360eba6c8030f426c14cdc33b3d3120801fa8 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -17,6 +17,7 @@ import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class CompoundTag implements Tag {
     public static final Codec<CompoundTag> CODEC = Codec.PASSTHROUGH.comapFlatMap((dynamic) -> {
@@ -315,7 +316,7 @@ public class CompoundTag implements Tag {
             throw new ReportedException(this.createReport(key, IntArrayTag.TYPE, var3));
         }
 
-        return new int[0];
+        return ArrayConstants.INTEMPTY; // Graphene
     }
 
     public long[] getLongArray(String key) {
diff --git a/src/main/java/net/minecraft/nbt/IntArrayTag.java b/src/main/java/net/minecraft/nbt/IntArrayTag.java
index e645d15c11ea33f890fdcf92edbadc3d6bd021b7..4d9ad10779b8698b7deb754e1630b7f30111cd99 100644
--- a/src/main/java/net/minecraft/nbt/IntArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/IntArrayTag.java
@@ -7,6 +7,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.ArrayUtils;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class IntArrayTag extends CollectionTag<IntTag> {
 
@@ -167,6 +168,6 @@ public class IntArrayTag extends CollectionTag<IntTag> {
     }
 
     public void clear() {
-        this.data = new int[0];
+        this.data = ArrayConstants.INTEMPTY; // Graphene
     }
 }
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 88bac72edf19c578902f49d20353989ed4d96f8f..aee22cfa31a024c310d39f78c361234a5890d89a 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -11,6 +11,7 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class ListTag extends CollectionTag<Tag> {
     private static final int SELF_SIZE_IN_BITS = 296;
@@ -165,7 +166,7 @@ public class ListTag extends CollectionTag<Tag> {
             }
         }
 
-        return new int[0];
+        return ArrayConstants.INTEMPTY; // Graphene
     }
 
     public long[] getLongArray(int index) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index deed7aaa9401e33285e04f646d2592f345f98689..ae04904f2168852c635d9e94161e91c6c41e9756 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1020,23 +1020,27 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     // CraftBukkit start
-    private boolean hasStopped = false;
+    //private boolean hasStopped = false; // Graphene
+    private final java.util.concurrent.atomic.AtomicBoolean hasStopped = new java.util.concurrent.atomic.AtomicBoolean(false); // Graphene
     public volatile boolean hasFullyShutdown = false; // Paper
     private boolean hasLoggedStop = false; // Paper
-    private final Object stopLock = new Object();
+    //private final Object stopLock = new Object(); // Graphene
     public final boolean hasStopped() {
-        synchronized (this.stopLock) {
-            return this.hasStopped;
-        }
+        return hasStopped.get(); // Graphene
     }
     // CraftBukkit end
 
     public void stopServer() {
         // CraftBukkit start - prevent double stopping on multiple threads
+        // Graphene start
+        /*
         synchronized(this.stopLock) {
             if (this.hasStopped) return;
             this.hasStopped = true;
         }
+        */
+        if (this.hasStopped.get()) return;
+        this.hasStopped.set(true);
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
         // Paper start - kill main thread, and kill it hard
         shutdownThread = Thread.currentThread();
@@ -1412,7 +1416,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     @Override
     public TickTask wrapRunnable(Runnable runnable) {
         // Paper start - anything that does try to post to main during watchdog crash, run on watchdog
-        if (this.hasStopped && Thread.currentThread().equals(shutdownThread)) {
+        if (this.hasStopped.get() && Thread.currentThread().equals(shutdownThread)) {
             runnable.run();
             runnable = () -> {};
         }
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index c54a4383826fb0c7f1a0b66fb82a5c2405ba6b10..7375f53d61882ed285e43ef77cba2a08f46b0ea4 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -965,7 +965,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             MutableBoolean mutableboolean = new MutableBoolean();
 
             do {
-                boolean isShuttingDown = level.getServer().hasStopped(); // Paper
+                //boolean isShuttingDown = level.getServer().hasStopped(); // Paper
                 mutableboolean.setFalse();
                 list.stream().map((playerchunk) -> {
                     CompletableFuture completablefuture;
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index ade010fe3b62a4624b009c6d665e9909b2d314ac..03b432f63b52d9edf4c92ebdb9d18e41d1c193e9 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -30,6 +30,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.storage.LevelResource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class OldUsersConverter {
 
@@ -330,7 +331,7 @@ public class OldUsersConverter {
             }
 
             try {
-                final String[] astring = (String[]) list.toArray(new String[list.size()]);
+                final String[] astring = (String[]) list.toArray(ArrayConstants.STREMPTY);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftServer.getProfileCache().add(gameprofile);
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 6c2e2bc3fbd27897d87a6e8d854a42bcef6821d6..746c8c5d896f054d6ddecab22b381a82a39a4f0b 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -26,6 +26,7 @@ import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
 
@@ -100,7 +101,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public String[] getUserList() {
-        return (String[]) this.map.keySet().toArray(new String[0]);
+        return (String[]) this.map.keySet().toArray(ArrayConstants.STREMPTY); // Graphene
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index f42e3a908ceb05d3ac4c7057e1fbdf667c6607b8..3c578168fd223515fd6e585afed1d5df50e66e64 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -28,6 +28,7 @@ import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
 import org.bukkit.inventory.RecipeChoice;
 // CraftBukkit end
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class ShapedRecipe implements CraftingRecipe {
 
@@ -242,7 +243,7 @@ public class ShapedRecipe implements CraftingRecipe {
         }
 
         if (pattern.length == l) {
-            return new String[0];
+            return ArrayConstants.STREMPTY; // Graphene
         } else {
             String[] astring1 = new String[pattern.length - l - k];
 
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 49e32713024d086256d34eef7150acb95e652028..d4aa5122cb0052e905cd3ca1065feda49774ae24 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -395,7 +395,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return side == Direction.DOWN ? ArrayConstants.ZERO : ArrayConstants.EMPTY; // Lithium
+            return side == Direction.DOWN ? ArrayConstants.INTZERO : ArrayConstants.INTEMPTY; // Lithium
         }
 
         @Override
@@ -444,7 +444,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return side == Direction.UP ? ArrayConstants.ZERO : ArrayConstants.EMPTY; // Lithium
+            return side == Direction.UP ? ArrayConstants.INTZERO : ArrayConstants.INTEMPTY; // Lithium
         }
 
         @Override
@@ -481,7 +481,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return ArrayConstants.EMPTY; // Lithium
+            return ArrayConstants.INTEMPTY; // Lithium
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 90d5768dc217350cc6eba8ff2982f5b90da79f43..9d0efe7d6340df8e763a31eb097389e709221b05 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -18,6 +18,7 @@ import java.io.FileInputStream;
 import java.io.InputStream;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 // CraftBukkit end
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class PlayerDataStorage {
 
@@ -152,7 +153,7 @@ public class PlayerDataStorage {
         String[] astring = this.playerDir.list();
 
         if (astring == null) {
-            astring = new String[0];
+            astring = ArrayConstants.STREMPTY; // Graphene
         }
 
         for (int i = 0; i < astring.length; ++i) {
diff --git a/src/main/java/net/pl3x/purpur/command/PurpurCommand.java b/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
index cd63e9e556fa4931ab33c63931cf916757c51a62..89d4bde27b511f6074fc52a4b0ceac61d521a1df 100644
--- a/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
+++ b/src/main/java/net/pl3x/purpur/command/PurpurCommand.java
@@ -13,6 +13,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 public class PurpurCommand extends Command {
     public PurpurCommand(String name) {
@@ -57,7 +58,7 @@ public class PurpurCommand extends Command {
         } else if (args[0].equalsIgnoreCase("version")) {
             Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
             if (verCmd != null) {
-                return verCmd.execute(sender, commandLabel, new String[0]);
+                return verCmd.execute(sender, commandLabel, ArrayConstants.STREMPTY);
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0a6a6cec9d77fd7dde414ae35a983851aadfd38a..f88cd970d9933edb20958946bb7713eee7962af4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -243,6 +243,7 @@ import org.bukkit.util.permissions.DefaultPermissions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
+import me.jellysquid.mods.lithium.common.util.ArrayConstants; // Graphene
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 
@@ -1572,7 +1573,7 @@ public final class CraftServer implements Server {
                     commands = ImmutableList.of(section.getString(key));
                 }
 
-                result.put(key, commands.toArray(new String[commands.size()]));
+                result.put(key, commands.toArray(ArrayConstants.STREMPTY)); // Graphene
             }
         }
 
@@ -2020,7 +2021,7 @@ public final class CraftServer implements Server {
 
         players.addAll(this.getOnlinePlayers());
 
-        return players.toArray(new OfflinePlayer[players.size()]);
+        return players.toArray(new OfflinePlayer[0]); // Graphene
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 5939aeff08fd1216c53f3af15362dddfa1e207c9..2672d633aa531868a73779ac6d14723ec32255fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -5,6 +5,7 @@ import com.google.common.collect.ImmutableSet;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections; // Graphene
 import java.util.Optional;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
@@ -623,7 +624,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public boolean discoverRecipe(NamespacedKey recipe) {
-        return this.discoverRecipes(Arrays.asList(recipe)) != 0;
+        return this.discoverRecipes(Collections.singletonList(recipe)) != 0; // Graphene
     }
 
     @Override
@@ -633,7 +634,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public boolean undiscoverRecipe(NamespacedKey recipe) {
-        return this.undiscoverRecipes(Arrays.asList(recipe)) != 0;
+        return this.undiscoverRecipes(Collections.singletonList(recipe)) != 0; // Graphene
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 049d750d3af991dd14ac8cf644330404e74b2151..29dd25894e34d7f64daf6759467e5509882a4399 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -175,10 +175,6 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     private Collection<T> toCollection() {
-        ArrayList<T> collection = new ArrayList<T>();
-        for (T value : this) {
-            collection.add(value);
-        }
-        return collection;
+        return new ArrayList<>(this); // Graphene
     }
 }
