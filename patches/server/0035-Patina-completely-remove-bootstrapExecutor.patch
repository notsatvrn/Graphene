From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Thu, 1 Jul 2021 12:26:15 +0000
Subject: [PATCH] Patina: completely remove bootstrapExecutor


diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 45753eebe06197af0d3564b30ff97c81caac087a..a019204e07df51292146b6fdf2d3bf8e1639566e 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -69,7 +69,7 @@ import java.util.Collections;
 
 public class Util {
     private static final AtomicInteger WORKER_COUNT = new AtomicInteger(1);
-    private static final ExecutorService BOOTSTRAP_EXECUTOR = makeExecutor("Bootstrap", -2); // Paper - add -2 priority
+    //private static final ExecutorService BOOTSTRAP_EXECUTOR = makeExecutor("Bootstrap", -2); // Paper - add -2 priority // Patina
     private static final ExecutorService BACKGROUND_EXECUTOR = makeExecutor("Main", -1); // Paper - add -1 priority
     // Paper start - don't submit BLOCKING PROFILE LOOKUPS to the world gen thread
     public static final ExecutorService PROFILE_EXECUTOR = Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() {
@@ -202,9 +202,11 @@ public class Util {
         return executorService;
     }
 
+    /* // Patina
     public static Executor bootstrapExecutor() {
         return BOOTSTRAP_EXECUTOR;
     }
+    */
 
     public static Executor backgroundExecutor() {
         return BACKGROUND_EXECUTOR;
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index f7c100c975210ba3c3af68311ee53f845ebe8dd3..d56b5c5725aa1c07526fbbf5ccde016c9ad74d57 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -75,15 +75,15 @@ public class DataFixers {
 
     private static final BiFunction<Integer, Schema, Schema> SAME = Schema::new;
     private static final BiFunction<Integer, Schema, Schema> SAME_NAMESPACED = NamespacedSchema::new;
-    private static final DataFixer DATA_FIXER = DataFixers.createFixerUpper();
+    private static final DataFixer DATA_FIXER; // Patina
 
     public DataFixers() {}
 
-    private static DataFixer createFixerUpper() {
+    static { // Patina
         DataFixerBuilder datafixerbuilder = new DataFixerBuilder(SharedConstants.getCurrentVersion().getWorldVersion());
 
         DataFixers.addFixers(datafixerbuilder);
-        return datafixerbuilder.build(Util.bootstrapExecutor());
+        DATA_FIXER = datafixerbuilder.build(Util.backgroundExecutor()); // Patina
     }
 
     public static DataFixer getDataFixer() {
