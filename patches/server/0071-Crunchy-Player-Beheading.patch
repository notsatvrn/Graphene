From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrFishCakes <finlayoxby@outlook.com>
Date: Tue, 9 Nov 2021 22:40:20 +0000
Subject: [PATCH] Crunchy: Player Beheading


diff --git a/src/main/java/io/graphenemc/graphene/GrapheneWorldConfig.java b/src/main/java/io/graphenemc/graphene/GrapheneWorldConfig.java
index 6ac23911fb79ae0d30fcd2c156760283410d6d08..233078510af4e9a45a201c622b3c8f631c95d615 100644
--- a/src/main/java/io/graphenemc/graphene/GrapheneWorldConfig.java
+++ b/src/main/java/io/graphenemc/graphene/GrapheneWorldConfig.java
@@ -1,9 +1,19 @@
 package io.graphenemc.graphene;
 
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
 import org.apache.commons.lang.BooleanUtils;
 import org.simpleyaml.configuration.ConfigurationSection;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Predicate;
@@ -77,6 +87,30 @@ public class GrapheneWorldConfig {
         return value.isEmpty() ? fallback : value;
     }
 
+    // Beheading Settings
+    public boolean beheadingEnabled;
+    public double beheadingChance;
+    public List<Item> beheadingItems;
+
+    private void beheadingSettings() {
+        beheadingEnabled = getBoolean("beheading.enabled", false);
+        beheadingChance = getDouble("beheading.chance", 0.03D);
+        beheadingItems = new ArrayList<>();
+        getStringList("beheading.items", List.of(
+                "minecraft:diamond_axe",
+                "minecraft:netherite_axe",
+                "minecraft:diamond_sword",
+                "minecraft:netherite_sword"
+        )).forEach(key -> {
+            Item item = Registry.ITEM.get(new ResourceLocation(key.toString()));
+            if (item != Items.AIR) beheadingItems.add(item);
+        });
+    }
+
+    public boolean isValidBeheadingItem(@Nullable Player player) {
+        return player != null && beheadingItems.contains(CraftItemStack.asNMSCopy(player.getInventory().getItemInMainHand()).getItem());
+    }
+
     // Chicken Settings
     public boolean chickenAvoidFox;
     public float chickenAvoidFoxDistance;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index cf9a4b9dd555af8316301cfbc290cc489738aaac..ad491373033b4233ff266217a9f255566ba2a8a2 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -859,7 +859,19 @@ public class ServerPlayer extends Player {
             return;
         }
         // Paper end
+        // Crunchy start - Player Beheading
+        if (level.grapheneConfig.beheadingEnabled) {
+            final double chance = level.grapheneConfig.beheadingChance;
 
+            if (chance > 0D && random.nextDouble() <= chance) {
+                if (level.grapheneConfig.isValidBeheadingItem(getBukkitEntity().getKiller())) {
+                    org.bukkit.inventory.ItemStack skullItem = new dev.mrfishcakes.crunchy.SkullBuilder().setOfflinePlayer(getBukkitEntity()).build();
+
+                    level.getWorld().dropItemNaturally(new org.bukkit.Location(level.getWorld(), getX(), getY(), getZ()), skullItem); // Drop separate to loot
+                }
+            }
+        }
+        // Crunchy end - Player Beheading
         // SPIGOT-943 - only call if they have an inventory open
         if (this.containerMenu != this.inventoryMenu) {
             this.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.DEATH); // Paper
